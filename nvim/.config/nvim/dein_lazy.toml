[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
set statusline^=%{coc#status()}

  let g:coc_global_extensions = [
    \'coc-pyright',
    \'coc-json',
    \'coc-diagnostic',
  \]
  inoremap <silent><expr> <c-space> coc#refresh()
  inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> <C-w>gd <cmd>vs<cr><Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gF <Plug>(coc-references)
  nmap <f2> <Plug>(coc-rename)
  nmap <silent> <leader><leader>h <Plug>(coc-diagnostic-prev)
  nmap <silent> <leader><leader>l <Plug>(coc-diagnostic-next)
  nmap <esc>w <cmd>call coc#float#close_all()<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
  nnoremap <silent> gh :call <SID>show_documentation()<CR>
  nnoremap <silent> <leader>a <cmd>CocAction<cr>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
  " higlight when hover cursor
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''
